# Visit https://goreleaser.com for documentation on how to customize this
# behavior.
version: 2
before:
  hooks:
    # this is just an example and not a requirement for provider building/publishing
    - go mod tidy
builds:
- env:
    # goreleaser does not work with CGO, it could also complicate
    # usage by users in CI/CD systems like Terraform Cloud where
    # they are unable to install libraries.
    - CGO_ENABLED=0
  mod_timestamp: '{{ .CommitTimestamp }}'
  flags:
    - -trimpath
  ldflags:
    - '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}'
  goos:
    - freebsd
    - windows
    - linux
    - darwin
  goarch:
    - amd64
    - '386'
    - arm
    - arm64
  ignore:
    - goos: darwin
      goarch: '386'
  binary: '{{ .ProjectName }}_v{{ .Version }}'
archives:
- format: zip
  name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}'
checksum:
  extra_files:
    - glob: 'terraform-registry-manifest.json'
      name_template: '{{ .ProjectName }}_{{ .Version }}_manifest.json'
  name_template: '{{ .ProjectName }}_{{ .Version }}_SHA256SUMS'
  algorithm: sha256
signs:
  - artifacts: checksum
    args:
      # if you are using this in a GitHub action or some other automated pipeline, you 
      # need to pass the batch flag to indicate its not interactive.
      - "--batch"
      - "--local-user"
      - "{{ .Env.GPG_FINGERPRINT }}" # set this environment variable for your signing key
      - "--output"
      - "${signature}"
      - "--detach-sign"
      - "${artifact}"
release:
  extra_files:
    - glob: 'terraform-registry-manifest.json'
      name_template: '{{ .ProjectName }}_{{ .Version }}_manifest.json'
  # If you want to manually examine the release before its live, uncomment this line:
  # draft: true

# Changelog section: Automatically generates a changelog from Git history.
changelog:
  # Sort order for changelog entries.
  sort: asc
  # Filters to include/exclude commit messages based on type.
  # This is useful for keeping the changelog clean and focused on user-facing changes.
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^chore:'
      - '^build:'
      - '^ci:'
      - '^refactor:'
      - '^style:'
    # If you use conventional commits, you can include specific types.
    # include:
    #   - '^feat:'
    #   - '^fix:'
    #   - '^perf:'
  # The path to the changelog file that will be generated.
  # This file will be included in the release notes.
  use: github
  # The path to a custom template for the changelog.
  # If not specified, Goreleaser uses a default template.
  # If you want to customize it, create a file like 'changelog.tmpl' and reference it here.
  # template: '{{ .ProjectName }} Changelog\n\n{{ .Changelog }}'